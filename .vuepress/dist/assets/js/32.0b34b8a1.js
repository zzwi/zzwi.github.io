(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{464:function(t,v,e){"use strict";e.r(v);var _=e(16),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue中computed和watch区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue中computed和watch区别"}},[t._v("#")]),t._v(" Vue中computed和watch区别")]),t._v(" "),e("p",[e("strong",[t._v("watch")]),t._v(" 顾名思义，用于监听数据变化，其中可以监听的数据来源有三部分：props、data、computed内的数据；watch提供两个参数（newValue，oldValue），第一个参数是新值，第二个参数保存旧值；")]),t._v(" "),e("p",[e("strong",[t._v("computed")]),t._v(" 用于处理复杂的逻辑运算，主要和 "),e("strong",[t._v("methods")]),t._v(" 储存方法来进行区分；methods储存方法，computed储存需要处理的数据值；methods每次都会调用，computed有缓存机制，只有改变时才执行，性能更佳；")]),t._v(" "),e("p",[e("strong",[t._v("computed")]),t._v(" 比较适合对多个变量或者对象进行处理后返回一个结果值，也就是多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化，举例：购物车里的商品列表和总金额之间的关系，只要商品列表里面的商品数量发生变化，或减少或增多或删除商品，总金额都必然发生变化。这里的这个总金额使用 "),e("strong",[t._v("computed")]),t._v(" 属性来进行计算是最好的选择；")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"计算属性computed的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算属性computed的特点"}},[t._v("#")]),t._v(" 计算属性computed的特点")]),t._v(" "),e("p",[t._v("1、 支持缓存，只有依赖数据发生改变，才会重新进行计算")]),t._v(" "),e("p",[t._v("2、 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化")]),t._v(" "),e("p",[t._v("3、 computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 "),e("strong",[t._v("data")]),t._v(" 中声明过的数据通过计算得到的")]),t._v(" "),e("p",[t._v("4、 如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed")]),t._v(" "),e("p",[t._v("5、 如果computed属性属性值是函数，那么默认会走 "),e("strong",[t._v("get")]),t._v(" 方法；函数的返回值就是属性的属性值； 在computed中的属性都有一个get和一个 "),e("strong",[t._v("set")]),t._v(" 方法，但数据变化时，调用 set 方法。")]),t._v(" "),e("h3",{attrs:{id:"注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[t._v("#")]),t._v(" 注意点")]),t._v(" "),e("p",[t._v("1、 computed 里的属性的值可以是一个对象，这个对象里有两个方法，get和set，但我们调用者个属性的时候，默认会走get，所以这时候还可以对读取的值做最后的设置，但是千万注意，不要在这里面修改计算属性本身，不然会死循环")]),t._v(" "),e("p",[t._v("2、 如果"),e("strong",[t._v("get")]),t._v(" 方法里面有定时器之类的话是会直接报错的，"),e("strong",[t._v("set")]),t._v(" 方法里没问题")]),t._v(" "),e("p",[t._v("3、 在没有 "),e("strong",[t._v("set")]),t._v(" 方法的前提下直接修改计算属性也会报错")]),t._v(" "),e("p",[t._v("4、 computed 计算的时间节点在 "),e("strong",[t._v("beforeCreate")]),t._v(" 之后")]),t._v(" "),e("h2",{attrs:{id:"监听属性watch的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监听属性watch的特点"}},[t._v("#")]),t._v(" 监听属性watch的特点")]),t._v(" "),e("p",[t._v("1、 不支持缓存，数据变化，直接会触发相应的操作；")]),t._v(" "),e("p",[t._v("2、 "),e("strong",[t._v("watch")]),t._v(" 支持异步；")]),t._v(" "),e("p",[t._v("3、 监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；")]),t._v(" "),e("p",[t._v("4、 当一个属性发生变化时，需要执行对应的操作；一对多；")]),t._v(" "),e("p",[t._v("5、 监听数据必须是 "),e("strong",[t._v("data")]),t._v(" 中声明过或者父组件传递过来的 "),e("strong",[t._v("props")]),t._v(" 中的数据，当数据变化时，触发其他操作")]),t._v(" "),e("h3",{attrs:{id:"watch的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch的属性"}},[t._v("#")]),t._v(" watch的属性")]),t._v(" "),e("p",[t._v("1、 "),e("strong",[t._v("immediate")]),t._v(" ：组件加载立即触发回调函数执行，")]),t._v(" "),e("p",[t._v("2、 "),e("strong",[t._v("deep")]),t._v(" ：深度监听，为了发现 "),e("strong",[t._v("对象内部值")]),t._v(" 的变化，复杂类型的数据时使用，例如数组中的对象内容的改变。")]),t._v(" "),e("h3",{attrs:{id:"注意点-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意点-2"}},[t._v("#")]),t._v(" 注意点")]),t._v(" "),e("p",[t._v("1、 "),e("strong",[t._v("deep")]),t._v(" 无法监听到数组的变动和对象的新增，参考 "),e("strong",[t._v("vue数组变异")]),t._v(" ，只有以响应式的方式触发才会被监听到")]),t._v(" "),e("p",[t._v("2、 但需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。这是和 "),e("strong",[t._v("computed")]),t._v(" 最大的区别")]),t._v(" "),e("h2",{attrs:{id:"工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),e("h3",{attrs:{id:"watch源码的工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch源码的工作流程"}},[t._v("#")]),t._v(" watch源码的工作流程：")]),t._v(" "),e("p",[t._v("1、 初始化组件上配置的 "),e("strong",[t._v("watcher")]),t._v(" 属性")]),t._v(" "),e("p",[t._v("2、 对 watcher 属性可能的写法进行规整，得出 key 和 handle")]),t._v(" "),e("p",[t._v("3、 通过 "),e("strong",[t._v("new Watcher")]),t._v(" 来创建一个基于 key 和 handle 的观察者")]),t._v(" "),e("p",[t._v("4、 Watcher 的 key 为响应式的 vm 上的变量，在 "),e("strong",[t._v("watcher.get")]),t._v(" 的时候，watcher 订阅了对应 key 的变化。完成响应依赖。")]),t._v(" "),e("p",[t._v("5、 当 key 的值发生了变化，触发 watcher 的更新方法，并执行回调函数 handle")]),t._v(" "),e("h3",{attrs:{id:"computed源码的工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed源码的工作流程"}},[t._v("#")]),t._v(" computed源码的工作流程：")]),t._v(" "),e("p",[t._v("1、 初始化的时候会获取 computed 里的定义。")]),t._v(" "),e("p",[t._v("2、 通过遍历第一步的结果，按照 computed 新的变量名生成 Watcher 实例。")]),t._v(" "),e("p",[t._v("3、 computed 的 watcher 默认是 lazy 模式的，所有 new Watcher 的时候不会调用 watcher 实例的 get 方法。")]),t._v(" "),e("p",[t._v("4、 vue 为 computed 里的每个 key 代理了一个新的 get 方法createComputedGetter()，当 render 页面的时候，新的 get 调用 computed watcher 实例的默认 get 方法。")]),t._v(" "),e("p",[t._v("5、 computed 执行自定义 get 方法的时候，会判断是否依赖又变动，没有的话，直接取值，否则去执行获取依赖的变量。")]),t._v(" "),e("p",[t._v("6、 获取依赖变量的时候，将 computed 的 watcher 实例订阅到依赖的变量的 Dep 中。")]),t._v(" "),e("p",[t._v("7、 走完这一步后，再调用计算列的 "),e("strong",[t._v("watcher.depend")]),t._v(" 将组件的watcher 实例也订阅到计算列依赖的所有变量的 dep 中。")]),t._v(" "),e("p",[t._v("8、 这样，当变量变化后，会通知 computed 的 watcher 将 "),e("strong",[t._v("dirty")]),t._v(" 设置为 true，以及组件的 watcher 更新 "),e("strong",[t._v("dom")]),t._v("。")])])}),[],!1,null,null,null);v.default=a.exports}}]);